// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "hassmic.proto" (package "hassmic", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Information saved and loaded between runs of the hassmic app
 *
 * @generated from protobuf message hassmic.SavedSettings
 */
export interface SavedSettings {
    /**
     * The last volume of the `announce` player
     *
     * @generated from protobuf field: float announce_volume = 1;
     */
    announceVolume: number;
    /**
     * The last volume of the `playback` player
     *
     * @generated from protobuf field: float playback_volume = 2;
     */
    playbackVolume: number;
}
/**
 * Information that the client sends about itself
 *
 * @generated from protobuf message hassmic.ClientInfo
 */
export interface ClientInfo {
    /**
     * The version, for example "0.9.2"
     *
     * @generated from protobuf field: string version = 1;
     */
    version: string;
    /**
     * The uuid of this client
     *
     * @generated from protobuf field: string uuid = 2;
     */
    uuid: string;
}
/**
 * A ping message
 *
 * @generated from protobuf message hassmic.Ping
 */
export interface Ping {
}
/**
 * @generated from protobuf message hassmic.AudioData
 */
export interface AudioData {
    /**
     * @generated from protobuf field: bytes data = 1;
     */
    data: Uint8Array;
}
/**
 * A command paired with a player
 *
 * @generated from protobuf message hassmic.MediaPlayerCommand
 */
export interface MediaPlayerCommand {
    /**
     * @generated from protobuf field: hassmic.MediaPlayerId id = 1;
     */
    id: MediaPlayerId;
    /**
     * @generated from protobuf field: hassmic.MediaPlayerCommandId command = 2;
     */
    command: MediaPlayerCommandId;
}
/**
 * A media player has changed volume
 *
 * @generated from protobuf message hassmic.MediaPlayerVolume
 */
export interface MediaPlayerVolume {
    /**
     * @generated from protobuf field: hassmic.MediaPlayerId player = 1;
     */
    player: MediaPlayerId;
    /**
     * @generated from protobuf field: float volume = 2;
     */
    volume: number;
}
/**
 * The device volume has changed
 *
 * @generated from protobuf message hassmic.DeviceVolume
 */
export interface DeviceVolume {
    /**
     * @generated from protobuf field: float volume = 1;
     */
    volume: number;
}
/**
 * A media player has changed state
 *
 * @generated from protobuf message hassmic.MediaPlayerStateChange
 */
export interface MediaPlayerStateChange {
    /**
     * @generated from protobuf field: hassmic.MediaPlayerId player = 1;
     */
    player: MediaPlayerId;
    /**
     * @generated from protobuf field: hassmic.MediaPlayerState new_state = 2;
     */
    newState: MediaPlayerState;
}
/**
 * Tell the server that a client event occurred
 *
 * @generated from protobuf message hassmic.ClientEvent
 */
export interface ClientEvent {
    /**
     * @generated from protobuf oneof: event
     */
    event: {
        oneofKind: "mediaPlayerStateChange";
        /**
         * @generated from protobuf field: hassmic.MediaPlayerStateChange media_player_state_change = 1;
         */
        mediaPlayerStateChange: MediaPlayerStateChange;
    } | {
        oneofKind: "mediaPlayerVolumeChange";
        /**
         * @generated from protobuf field: hassmic.MediaPlayerVolume media_player_volume_change = 2;
         */
        mediaPlayerVolumeChange: MediaPlayerVolume;
    } | {
        oneofKind: "deviceVolumeChange";
        /**
         * @generated from protobuf field: hassmic.DeviceVolume device_volume_change = 3;
         */
        deviceVolumeChange: DeviceVolume;
    } | {
        oneofKind: "log";
        /**
         * @generated from protobuf field: hassmic.Log log = 4;
         */
        log: Log;
    } | {
        oneofKind: undefined;
    };
}
/**
 * A log message passed from the client to the server
 *
 * @generated from protobuf message hassmic.Log
 */
export interface Log {
    /**
     * @generated from protobuf field: string log_text = 1;
     */
    logText: string;
    /**
     * @generated from protobuf field: hassmic.Log.Severity severity = 2;
     */
    severity: Log_Severity;
}
/**
 * @generated from protobuf enum hassmic.Log.Severity
 */
export enum Log_Severity {
    /**
     * @generated from protobuf enum value: SEVERITY_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: SEVERITY_DEBUG = 1;
     */
    DEBUG = 1,
    /**
     * @generated from protobuf enum value: SEVERITY_INFO = 2;
     */
    INFO = 2,
    /**
     * @generated from protobuf enum value: SEVERITY_WARNING = 3;
     */
    WARNING = 3,
    /**
     * @generated from protobuf enum value: SEVERITY_ERROR = 4;
     */
    ERROR = 4
}
/**
 * The wrapper message that actually gets sent to the server
 *
 * @generated from protobuf message hassmic.ClientMessage
 */
export interface ClientMessage {
    /**
     * @generated from protobuf oneof: msg
     */
    msg: {
        oneofKind: "ping";
        /**
         * @generated from protobuf field: hassmic.Ping ping = 1;
         */
        ping: Ping;
    } | {
        oneofKind: "clientInfo";
        /**
         * @generated from protobuf field: hassmic.ClientInfo client_info = 2;
         */
        clientInfo: ClientInfo;
    } | {
        oneofKind: "audioData";
        /**
         * @generated from protobuf field: hassmic.AudioData audio_data = 3;
         */
        audioData: AudioData;
    } | {
        oneofKind: "clientEvent";
        /**
         * @generated from protobuf field: hassmic.ClientEvent client_event = 4;
         */
        clientEvent: ClientEvent;
    } | {
        oneofKind: "savedSettings";
        /**
         * @generated from protobuf field: hassmic.SavedSettings saved_settings = 5;
         */
        savedSettings: SavedSettings;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Play an audio file
 *
 * @generated from protobuf message hassmic.PlayAudio
 */
export interface PlayAudio {
    /**
     * Whether this should be an announcement or not
     *
     * @generated from protobuf field: bool announce = 1;
     */
    announce: boolean;
    /**
     * The url to play
     *
     * @generated from protobuf field: string url = 2;
     */
    url: string;
}
/**
 * The wrapper message that gets sent from the server to the client
 *
 * @generated from protobuf message hassmic.ServerMessage
 */
export interface ServerMessage {
    /**
     * @generated from protobuf oneof: msg
     */
    msg: {
        oneofKind: "playAudio";
        /**
         * A command to play audio
         *
         * @generated from protobuf field: hassmic.PlayAudio play_audio = 1;
         */
        playAudio: PlayAudio;
    } | {
        oneofKind: "setMicMute";
        /**
         * Set whether the mic should be muted
         *
         * @generated from protobuf field: bool set_mic_mute = 2;
         */
        setMicMute: boolean;
    } | {
        oneofKind: "setDeviceVolume";
        /**
         * Set the volume of the device
         *
         * @generated from protobuf field: hassmic.DeviceVolume set_device_volume = 3;
         */
        setDeviceVolume: DeviceVolume;
    } | {
        oneofKind: "setPlayerVolume";
        /**
         * Set the volume of a player
         *
         * @generated from protobuf field: hassmic.MediaPlayerVolume set_player_volume = 4;
         */
        setPlayerVolume: MediaPlayerVolume;
    } | {
        oneofKind: "command";
        /**
         * Play, pause, stop, etc
         *
         * @generated from protobuf field: hassmic.MediaPlayerCommand command = 5;
         */
        command: MediaPlayerCommand;
    } | {
        oneofKind: undefined;
    };
}
/**
 * https://developer.android.com/reference/androidx/media3/common/Player.State
 *
 * @generated from protobuf enum hassmic.MediaPlayerState
 */
export enum MediaPlayerState {
    /**
     * @generated from protobuf enum value: STATE_UNKNOWN = 0;
     */
    STATE_UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: STATE_IDLE = 1;
     */
    STATE_IDLE = 1,
    /**
     * @generated from protobuf enum value: STATE_BUFFERING = 2;
     */
    STATE_BUFFERING = 2,
    /**
     * @generated from protobuf enum value: STATE_PLAYING = 3;
     */
    STATE_PLAYING = 3,
    /**
     * @generated from protobuf enum value: STATE_PAUSED = 4;
     */
    STATE_PAUSED = 4
}
/**
 * @generated from protobuf enum hassmic.MediaPlayerCommandId
 */
export enum MediaPlayerCommandId {
    /**
     * @generated from protobuf enum value: COMMAND_UNKNOWN = 0;
     */
    COMMAND_UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: COMMAND_PLAY = 1;
     */
    COMMAND_PLAY = 1,
    /**
     * @generated from protobuf enum value: COMMAND_PAUSE = 2;
     */
    COMMAND_PAUSE = 2,
    /**
     * @generated from protobuf enum value: COMMAND_STOP = 3;
     */
    COMMAND_STOP = 3
}
/**
 * The different media players available
 *
 * @generated from protobuf enum hassmic.MediaPlayerId
 */
export enum MediaPlayerId {
    /**
     * @generated from protobuf enum value: ID_UNKNOWN = 0;
     */
    ID_UNKNOWN = 0,
    /**
     * The normal music/audio playback player
     *
     * @generated from protobuf enum value: ID_PLAYBACK = 1;
     */
    ID_PLAYBACK = 1,
    /**
     * The announce player
     *
     * @generated from protobuf enum value: ID_ANNOUNCE = 2;
     */
    ID_ANNOUNCE = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class SavedSettings$Type extends MessageType<SavedSettings> {
    constructor() {
        super("hassmic.SavedSettings", [
            { no: 1, name: "announce_volume", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "playback_volume", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<SavedSettings>): SavedSettings {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.announceVolume = 0;
        message.playbackVolume = 0;
        if (value !== undefined)
            reflectionMergePartial<SavedSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedSettings): SavedSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float announce_volume */ 1:
                    message.announceVolume = reader.float();
                    break;
                case /* float playback_volume */ 2:
                    message.playbackVolume = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SavedSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float announce_volume = 1; */
        if (message.announceVolume !== 0)
            writer.tag(1, WireType.Bit32).float(message.announceVolume);
        /* float playback_volume = 2; */
        if (message.playbackVolume !== 0)
            writer.tag(2, WireType.Bit32).float(message.playbackVolume);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hassmic.SavedSettings
 */
export const SavedSettings = new SavedSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientInfo$Type extends MessageType<ClientInfo> {
    constructor() {
        super("hassmic.ClientInfo", [
            { no: 1, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ClientInfo>): ClientInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.version = "";
        message.uuid = "";
        if (value !== undefined)
            reflectionMergePartial<ClientInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientInfo): ClientInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string version */ 1:
                    message.version = reader.string();
                    break;
                case /* string uuid */ 2:
                    message.uuid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string version = 1; */
        if (message.version !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.version);
        /* string uuid = 2; */
        if (message.uuid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hassmic.ClientInfo
 */
export const ClientInfo = new ClientInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Ping$Type extends MessageType<Ping> {
    constructor() {
        super("hassmic.Ping", []);
    }
    create(value?: PartialMessage<Ping>): Ping {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Ping>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Ping): Ping {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Ping, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hassmic.Ping
 */
export const Ping = new Ping$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudioData$Type extends MessageType<AudioData> {
    constructor() {
        super("hassmic.AudioData", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<AudioData>): AudioData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<AudioData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudioData): AudioData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AudioData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hassmic.AudioData
 */
export const AudioData = new AudioData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MediaPlayerCommand$Type extends MessageType<MediaPlayerCommand> {
    constructor() {
        super("hassmic.MediaPlayerCommand", [
            { no: 1, name: "id", kind: "enum", T: () => ["hassmic.MediaPlayerId", MediaPlayerId] },
            { no: 2, name: "command", kind: "enum", T: () => ["hassmic.MediaPlayerCommandId", MediaPlayerCommandId] }
        ]);
    }
    create(value?: PartialMessage<MediaPlayerCommand>): MediaPlayerCommand {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.command = 0;
        if (value !== undefined)
            reflectionMergePartial<MediaPlayerCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MediaPlayerCommand): MediaPlayerCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hassmic.MediaPlayerId id */ 1:
                    message.id = reader.int32();
                    break;
                case /* hassmic.MediaPlayerCommandId command */ 2:
                    message.command = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MediaPlayerCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hassmic.MediaPlayerId id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* hassmic.MediaPlayerCommandId command = 2; */
        if (message.command !== 0)
            writer.tag(2, WireType.Varint).int32(message.command);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hassmic.MediaPlayerCommand
 */
export const MediaPlayerCommand = new MediaPlayerCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MediaPlayerVolume$Type extends MessageType<MediaPlayerVolume> {
    constructor() {
        super("hassmic.MediaPlayerVolume", [
            { no: 1, name: "player", kind: "enum", T: () => ["hassmic.MediaPlayerId", MediaPlayerId] },
            { no: 2, name: "volume", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<MediaPlayerVolume>): MediaPlayerVolume {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.player = 0;
        message.volume = 0;
        if (value !== undefined)
            reflectionMergePartial<MediaPlayerVolume>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MediaPlayerVolume): MediaPlayerVolume {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hassmic.MediaPlayerId player */ 1:
                    message.player = reader.int32();
                    break;
                case /* float volume */ 2:
                    message.volume = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MediaPlayerVolume, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hassmic.MediaPlayerId player = 1; */
        if (message.player !== 0)
            writer.tag(1, WireType.Varint).int32(message.player);
        /* float volume = 2; */
        if (message.volume !== 0)
            writer.tag(2, WireType.Bit32).float(message.volume);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hassmic.MediaPlayerVolume
 */
export const MediaPlayerVolume = new MediaPlayerVolume$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceVolume$Type extends MessageType<DeviceVolume> {
    constructor() {
        super("hassmic.DeviceVolume", [
            { no: 1, name: "volume", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<DeviceVolume>): DeviceVolume {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.volume = 0;
        if (value !== undefined)
            reflectionMergePartial<DeviceVolume>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceVolume): DeviceVolume {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float volume */ 1:
                    message.volume = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceVolume, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float volume = 1; */
        if (message.volume !== 0)
            writer.tag(1, WireType.Bit32).float(message.volume);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hassmic.DeviceVolume
 */
export const DeviceVolume = new DeviceVolume$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MediaPlayerStateChange$Type extends MessageType<MediaPlayerStateChange> {
    constructor() {
        super("hassmic.MediaPlayerStateChange", [
            { no: 1, name: "player", kind: "enum", T: () => ["hassmic.MediaPlayerId", MediaPlayerId] },
            { no: 2, name: "new_state", kind: "enum", T: () => ["hassmic.MediaPlayerState", MediaPlayerState] }
        ]);
    }
    create(value?: PartialMessage<MediaPlayerStateChange>): MediaPlayerStateChange {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.player = 0;
        message.newState = 0;
        if (value !== undefined)
            reflectionMergePartial<MediaPlayerStateChange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MediaPlayerStateChange): MediaPlayerStateChange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hassmic.MediaPlayerId player */ 1:
                    message.player = reader.int32();
                    break;
                case /* hassmic.MediaPlayerState new_state */ 2:
                    message.newState = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MediaPlayerStateChange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hassmic.MediaPlayerId player = 1; */
        if (message.player !== 0)
            writer.tag(1, WireType.Varint).int32(message.player);
        /* hassmic.MediaPlayerState new_state = 2; */
        if (message.newState !== 0)
            writer.tag(2, WireType.Varint).int32(message.newState);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hassmic.MediaPlayerStateChange
 */
export const MediaPlayerStateChange = new MediaPlayerStateChange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientEvent$Type extends MessageType<ClientEvent> {
    constructor() {
        super("hassmic.ClientEvent", [
            { no: 1, name: "media_player_state_change", kind: "message", oneof: "event", T: () => MediaPlayerStateChange },
            { no: 2, name: "media_player_volume_change", kind: "message", oneof: "event", T: () => MediaPlayerVolume },
            { no: 3, name: "device_volume_change", kind: "message", oneof: "event", T: () => DeviceVolume },
            { no: 4, name: "log", kind: "message", oneof: "event", T: () => Log }
        ]);
    }
    create(value?: PartialMessage<ClientEvent>): ClientEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.event = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ClientEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientEvent): ClientEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hassmic.MediaPlayerStateChange media_player_state_change */ 1:
                    message.event = {
                        oneofKind: "mediaPlayerStateChange",
                        mediaPlayerStateChange: MediaPlayerStateChange.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).mediaPlayerStateChange)
                    };
                    break;
                case /* hassmic.MediaPlayerVolume media_player_volume_change */ 2:
                    message.event = {
                        oneofKind: "mediaPlayerVolumeChange",
                        mediaPlayerVolumeChange: MediaPlayerVolume.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).mediaPlayerVolumeChange)
                    };
                    break;
                case /* hassmic.DeviceVolume device_volume_change */ 3:
                    message.event = {
                        oneofKind: "deviceVolumeChange",
                        deviceVolumeChange: DeviceVolume.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).deviceVolumeChange)
                    };
                    break;
                case /* hassmic.Log log */ 4:
                    message.event = {
                        oneofKind: "log",
                        log: Log.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).log)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hassmic.MediaPlayerStateChange media_player_state_change = 1; */
        if (message.event.oneofKind === "mediaPlayerStateChange")
            MediaPlayerStateChange.internalBinaryWrite(message.event.mediaPlayerStateChange, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* hassmic.MediaPlayerVolume media_player_volume_change = 2; */
        if (message.event.oneofKind === "mediaPlayerVolumeChange")
            MediaPlayerVolume.internalBinaryWrite(message.event.mediaPlayerVolumeChange, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* hassmic.DeviceVolume device_volume_change = 3; */
        if (message.event.oneofKind === "deviceVolumeChange")
            DeviceVolume.internalBinaryWrite(message.event.deviceVolumeChange, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* hassmic.Log log = 4; */
        if (message.event.oneofKind === "log")
            Log.internalBinaryWrite(message.event.log, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hassmic.ClientEvent
 */
export const ClientEvent = new ClientEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Log$Type extends MessageType<Log> {
    constructor() {
        super("hassmic.Log", [
            { no: 1, name: "log_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "severity", kind: "enum", T: () => ["hassmic.Log.Severity", Log_Severity, "SEVERITY_"] }
        ]);
    }
    create(value?: PartialMessage<Log>): Log {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.logText = "";
        message.severity = 0;
        if (value !== undefined)
            reflectionMergePartial<Log>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Log): Log {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string log_text */ 1:
                    message.logText = reader.string();
                    break;
                case /* hassmic.Log.Severity severity */ 2:
                    message.severity = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Log, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string log_text = 1; */
        if (message.logText !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.logText);
        /* hassmic.Log.Severity severity = 2; */
        if (message.severity !== 0)
            writer.tag(2, WireType.Varint).int32(message.severity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hassmic.Log
 */
export const Log = new Log$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientMessage$Type extends MessageType<ClientMessage> {
    constructor() {
        super("hassmic.ClientMessage", [
            { no: 1, name: "ping", kind: "message", oneof: "msg", T: () => Ping },
            { no: 2, name: "client_info", kind: "message", oneof: "msg", T: () => ClientInfo },
            { no: 3, name: "audio_data", kind: "message", oneof: "msg", T: () => AudioData },
            { no: 4, name: "client_event", kind: "message", oneof: "msg", T: () => ClientEvent },
            { no: 5, name: "saved_settings", kind: "message", oneof: "msg", T: () => SavedSettings }
        ]);
    }
    create(value?: PartialMessage<ClientMessage>): ClientMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.msg = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ClientMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientMessage): ClientMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hassmic.Ping ping */ 1:
                    message.msg = {
                        oneofKind: "ping",
                        ping: Ping.internalBinaryRead(reader, reader.uint32(), options, (message.msg as any).ping)
                    };
                    break;
                case /* hassmic.ClientInfo client_info */ 2:
                    message.msg = {
                        oneofKind: "clientInfo",
                        clientInfo: ClientInfo.internalBinaryRead(reader, reader.uint32(), options, (message.msg as any).clientInfo)
                    };
                    break;
                case /* hassmic.AudioData audio_data */ 3:
                    message.msg = {
                        oneofKind: "audioData",
                        audioData: AudioData.internalBinaryRead(reader, reader.uint32(), options, (message.msg as any).audioData)
                    };
                    break;
                case /* hassmic.ClientEvent client_event */ 4:
                    message.msg = {
                        oneofKind: "clientEvent",
                        clientEvent: ClientEvent.internalBinaryRead(reader, reader.uint32(), options, (message.msg as any).clientEvent)
                    };
                    break;
                case /* hassmic.SavedSettings saved_settings */ 5:
                    message.msg = {
                        oneofKind: "savedSettings",
                        savedSettings: SavedSettings.internalBinaryRead(reader, reader.uint32(), options, (message.msg as any).savedSettings)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hassmic.Ping ping = 1; */
        if (message.msg.oneofKind === "ping")
            Ping.internalBinaryWrite(message.msg.ping, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* hassmic.ClientInfo client_info = 2; */
        if (message.msg.oneofKind === "clientInfo")
            ClientInfo.internalBinaryWrite(message.msg.clientInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* hassmic.AudioData audio_data = 3; */
        if (message.msg.oneofKind === "audioData")
            AudioData.internalBinaryWrite(message.msg.audioData, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* hassmic.ClientEvent client_event = 4; */
        if (message.msg.oneofKind === "clientEvent")
            ClientEvent.internalBinaryWrite(message.msg.clientEvent, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* hassmic.SavedSettings saved_settings = 5; */
        if (message.msg.oneofKind === "savedSettings")
            SavedSettings.internalBinaryWrite(message.msg.savedSettings, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hassmic.ClientMessage
 */
export const ClientMessage = new ClientMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayAudio$Type extends MessageType<PlayAudio> {
    constructor() {
        super("hassmic.PlayAudio", [
            { no: 1, name: "announce", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayAudio>): PlayAudio {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.announce = false;
        message.url = "";
        if (value !== undefined)
            reflectionMergePartial<PlayAudio>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayAudio): PlayAudio {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool announce */ 1:
                    message.announce = reader.bool();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayAudio, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool announce = 1; */
        if (message.announce !== false)
            writer.tag(1, WireType.Varint).bool(message.announce);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hassmic.PlayAudio
 */
export const PlayAudio = new PlayAudio$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerMessage$Type extends MessageType<ServerMessage> {
    constructor() {
        super("hassmic.ServerMessage", [
            { no: 1, name: "play_audio", kind: "message", oneof: "msg", T: () => PlayAudio },
            { no: 2, name: "set_mic_mute", kind: "scalar", oneof: "msg", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "set_device_volume", kind: "message", oneof: "msg", T: () => DeviceVolume },
            { no: 4, name: "set_player_volume", kind: "message", oneof: "msg", T: () => MediaPlayerVolume },
            { no: 5, name: "command", kind: "message", oneof: "msg", T: () => MediaPlayerCommand }
        ]);
    }
    create(value?: PartialMessage<ServerMessage>): ServerMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.msg = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ServerMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerMessage): ServerMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hassmic.PlayAudio play_audio */ 1:
                    message.msg = {
                        oneofKind: "playAudio",
                        playAudio: PlayAudio.internalBinaryRead(reader, reader.uint32(), options, (message.msg as any).playAudio)
                    };
                    break;
                case /* bool set_mic_mute */ 2:
                    message.msg = {
                        oneofKind: "setMicMute",
                        setMicMute: reader.bool()
                    };
                    break;
                case /* hassmic.DeviceVolume set_device_volume */ 3:
                    message.msg = {
                        oneofKind: "setDeviceVolume",
                        setDeviceVolume: DeviceVolume.internalBinaryRead(reader, reader.uint32(), options, (message.msg as any).setDeviceVolume)
                    };
                    break;
                case /* hassmic.MediaPlayerVolume set_player_volume */ 4:
                    message.msg = {
                        oneofKind: "setPlayerVolume",
                        setPlayerVolume: MediaPlayerVolume.internalBinaryRead(reader, reader.uint32(), options, (message.msg as any).setPlayerVolume)
                    };
                    break;
                case /* hassmic.MediaPlayerCommand command */ 5:
                    message.msg = {
                        oneofKind: "command",
                        command: MediaPlayerCommand.internalBinaryRead(reader, reader.uint32(), options, (message.msg as any).command)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hassmic.PlayAudio play_audio = 1; */
        if (message.msg.oneofKind === "playAudio")
            PlayAudio.internalBinaryWrite(message.msg.playAudio, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool set_mic_mute = 2; */
        if (message.msg.oneofKind === "setMicMute")
            writer.tag(2, WireType.Varint).bool(message.msg.setMicMute);
        /* hassmic.DeviceVolume set_device_volume = 3; */
        if (message.msg.oneofKind === "setDeviceVolume")
            DeviceVolume.internalBinaryWrite(message.msg.setDeviceVolume, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* hassmic.MediaPlayerVolume set_player_volume = 4; */
        if (message.msg.oneofKind === "setPlayerVolume")
            MediaPlayerVolume.internalBinaryWrite(message.msg.setPlayerVolume, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* hassmic.MediaPlayerCommand command = 5; */
        if (message.msg.oneofKind === "command")
            MediaPlayerCommand.internalBinaryWrite(message.msg.command, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hassmic.ServerMessage
 */
export const ServerMessage = new ServerMessage$Type();
